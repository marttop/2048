cmake_minimum_required(VERSION 3.16)
project(2048)

find_package(raylib 4.2.0 REQUIRED)

## ENABLE LOGGING ##
option(LOGGING "Enable logging" ON)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)

add_executable(${PROJECT_NAME} src/main.cpp)
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_17)
target_sources(${PROJECT_NAME} PRIVATE "src/utils/utils.cpp"
    "src/scenes/GameScene.cpp"
    "src/entities/Tile.cpp"
)

# raygui
set(RAYGUI_LIBRARY "${CMAKE_CURRENT_SOURCE_DIR}/libs/raygui.dynlib")
message(STATUS "RAYGUI_LIBRARY: ${RAYGUI_LIBRARY}")
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${RAYGUI_LIBRARY}" $<TARGET_FILE_DIR:${PROJECT_NAME}>)
target_link_libraries(${PROJECT_NAME} "${RAYGUI_LIBRARY}")

# spdlog
find_library(SPDLOG NAMES spdlog PATHS "${CMAKE_CURRENT_SOURCE_DIR}/libs")
if(LOGGING)
    add_compile_definitions(LOGGING)
endif()


if(SPDLOG)
    message(STATUS "Found spdlog: ${SPDLOG}")
else()
    message(FATAL_ERROR "Cannot find spdlog")
endif()

# Linking libraries
target_link_libraries(${PROJECT_NAME} raylib)
target_link_libraries(${PROJECT_NAME} ${SPDLOG})

# Project includes
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/entities)
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/interface)
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/utils)
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/scenes)

# Include for libs
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/submodules/logger/include)
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/submodules/raygui/src)
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/submodules/json/include)

if(APPLE)
    target_link_libraries(${PROJECT_NAME} "-framework IOKit")
    target_link_libraries(${PROJECT_NAME} "-framework Cocoa")
    target_link_libraries(${PROJECT_NAME} "-framework OpenGL")
endif()
